


Case 1 (row take problem):


	{
		"A": {
			cons: LAY.take("../I", "rows").filterFetch(0, "num" ) //first item price 
		},
		"I": {
			many: {
				rows: LAY.take("/", "transactions")
			}
		}
	}



	"A" -> inherits from "I:0"
	"B" -> takes from "A" 
	"I:rows" -> takes from "B"


The "rows" attribute of many decomposes down to the "row" key in the LSON
which is similar to "data" in every way except that it cannot have
takes occuring with in.

The must be a default 2 way binding across the "rows" attribute of many.
i.e
	(1) If the "rows" attribute of many is changed (by committing), then the resulting changes must reflect on the corresponding level(s).
	(2) If a level which is a part of a many has its data changed then the resulting changes must reflect on the "rows" attribute of many.


IOS app screen (assuming no holes)


	{
		"IconsWrapper": {
			data: {
				pageSize: 300,
				numScrollPage: 0
			},
			props: {
				width: LAY.take("", "$naturalWidth").add(
					LAY.take( "",
						"data.pageSize")
				),
				overflowX: "scroll",
				scrollX: LAY.take("", "data.numScrollPage")
			},
			when: {
				// scroll end
				"mouseup": [
					function () {
						this.data("data.numScrollPage",
							Math.round(
								parseFloat(this.attr("$scrollX")) /
								this.attr("data.pageSize"))
							)		
						);
					
					}
				]
			},
			"Icons": {
				props: {
					top: LAY.take("", "row.y").multiply(
						LAY.take("../Icons", "data.vgap").add(LAY.take("", "height"))),
					left: LAY.take("", "row.x").multiply(
						LAY.take("../Icons", "data.hgap").add(LAY.take("", "width"))).plus(
							LAY.take("", "row.pageNum").multiply(
							LAY.take("../Icons", "data.pageSize")
							)
						),
						
				states: {
					"drag": {
						onlyif: LAY.take("", "data.drag"),
						props: {
							top: LAY.take("", "data.x"),
							left: LAY.take("", "data.y")
						}
					}
				},
				},
				many: {
					
					filter: LAY.take("", "rows").filterEq("recentlyDeleted", false),
					load: function () {
						var ajaxIcons = getOverAjax("icons");
						this.rows(ajaxIcons)
					}
				}
			},
		}
		"IconPage": {

			many: {
				rows: LAY.take("/", "data.apps").length().mod(
					LAY.take("/", "appsPerPage")
				)
			}
		}

	}


